{
    "contents" : "#' Compute the S1 P1 and B1 and S2 P2 B2 in fact P2=P1\n#'\n#' This function computes the new bayesian estimator\n#'\n#' @param Y binary repsonse vector length of n\n#' @param X binary exposure vector same length with Y\n#' @param C binary confounder matrix n*r, r the number of counfouders\n#' @param k_q(1) prior parameter of the Dirichlet distribution for Pr(C=c)\n#' @param mean(0.01,0.99),con(1,20) the range of the grid for the hyperparameter of the saturated new estimate\n#' @param BinMean(20),BinCon(20) control the number of new-added points \n#' @param kappa(0.5) the prior weight when calculating the bayesian esimate\n#' @param beta the prior of the paramatric estimate\n#' @param Mc.error(0.001), controls the Mc.error when estimating the parametric estimate\n#' @param addBin(10) can be a vector the default is 10\n#' @return a list of saturated, bayesian estimate and paramatric estimate\n#' @seealso AllEst_C\n#' @export\n#' @importFrom plyr dlply\n#' @importFrom boot inv.logit\n#' @importFrom LaplacesDemon as.inverse as.symmetric.matrix\n#' @importFrom mnormt dmnorm\n#' @importFrom speedglm speedglm\n#' @examples \n#' \\dontrun{\n#' data(sampleDat)\n#' Y=sample.dataset$Y\n#' X=sample.dataset$X\n#' C=sample.dataset$C\n#' bay.est.new(Y,X,C)\n#' }\nsat2 <- function(Y,X,C,k_q,mean,BinMean,con,BinCon,addBin,kappa,beta,Mc.error,liketype,Dat)\n{\n  if (missing(Y)|missing(X)|missing(C)) {Y=Dat$Y;X=Dat$X;C=Dat[,paste0(\"C\",1:(ncol(Dat)-2))]}\n  if (missing(Dat)&(missing(Y)|missing(X)|missing(C))) stop(\"Data entry wrong Y or X or C or Dat is missing\") \n  if (missing(k_q)) k_q=1\n  if (missing(mean)) mean=c(0.01,0.99)\n  if (missing(con)) con=c(1,20)\n  if (missing(BinMean)) BinMean=20\n  if (missing(BinCon)) BinCon=20\n  if (missing(beta)) beta=30^2*diag(rep(1,ncol(C)+2))\n  if (missing(Mc.error)) Mc.error=0.001\n  if (missing(kappa)) kappa=0.5\n  if (missing(addBin)) addBin=c(0,10)\n  if (missing(liketype)) liketype=\"bernoulli\"\n  \n  temp.p = para.est(Y,X,C,beta=beta,k_q=k_q,Mc.error=Mc.error)\n  estimate.p = temp.p$P\n  likelihood.p=temp.p$likelihood\n  temp.s0 <- sat.est.new(Y,X,C,k_q,mean,BinMean,con,BinCon,addBin=addBin[1],liketype=liketype)\n  likelihood0 = temp.s0$likelihood.new\n  estimate.s0 = temp.s0$est.new\n  \n  ratio.likelihood0<- exp(likelihood0 - likelihood.p)\n  w0 <- kappa/(kappa+(1-kappa)*ratio.likelihood0)\n  estimate.b0 <- w0*estimate.p+(1-w0)*estimate.s0 # bayesian estimate for hirarchical version\n  \n  temp.s1 <- sat.est.new(Y,X,C,k_q,mean,BinMean,con,BinCon,addBin=addBin[2],liketype=liketype)\n  likelihood1 = temp.s1$likelihood.new\n  estimate.s1 = temp.s1$est.new\n  \n  ratio.likelihood1<- exp(likelihood1 - likelihood.p)\n  w1 <- kappa/(kappa+(1-kappa)*ratio.likelihood1)\n  estimate.b1 <- w1*estimate.p+(1-w1)*estimate.s1 # bayesian estimate for hirarchical version\n  \n  \n  return(\n    list(est=c(S0=estimate.s0, \n               P=estimate.p,\n               B0=estimate.b0,\n               S1=estimate.s1,\n               B1=estimate.b1\n                ),\n         likelihood=c(l.p=likelihood.p,l.S0=likelihood0,l.S1=likelihood1)    \n    )\n  )  \n}\n",
    "created" : 1374083202364.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3205654585",
    "id" : "6B3E3A7",
    "lastKnownWriteTime" : 1374092054,
    "path" : "~/Dropbox/UBC/CinR/FileOnSever/Mypackages/Import/R/satMulti.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "source_on_save" : false,
    "type" : "r_source"
}